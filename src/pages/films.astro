---
import Layout from "../layouts/Layout.astro";
import "@styles/plyr.css";

const videos = [
  {
    id: "180157095",
    poster: "/images/thumbs/thumb-nightfall.webp",
    title: "NIGHTFALL",
    thumb: "/videos/v-thumb-nightfall.webm",
  },
  {
    id: "156413267",
    poster: "/images/thumbs/thumb-alabama.webp",
    title: "Alabama Shakes — Gimme All Your Love",
    thumb: "/videos/v-thumb-alabama.webm",
  },
  {
    id: "129055751",
    poster: "/images/thumbs/thumb-cgs.webp",
    title: "CGS",
    thumb: "/videos/v-thumb-cgs.webm",
  },
  {
    id: "150533258",
    poster: "/images/thumbs/thumb-woowooki.webp",
    title: "WOOWOOKI",
    thumb: "/videos/v-thumb-woowooki.webm",
  },
];
---

<Layout>
  <div class="flex justify-center w-full px-20 min-w-">
    <div class="flex w-full">
      <main class="pt-[110px] w-full">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {
            videos.map((video) => (
              <div class="rounded-xl overflow-hidden">
                <div
                  class="plyr__video-embed thumbnail-container"
                  id={`player-${video.id}`}
                >
                  {/* <div
                    class="custom-fs-exit"
                    onclick="document.exitFullscreen()"
                  >
                    ✕
                  </div> */}

                  <div class="thumbnail-overlay">
                    <img
                      class="poster-image"
                      src={video.poster}
                      alt="Video Thumbnail"
                    />
                    <video class="hover-preview" muted loop preload="auto">
                      <source src={video.thumb} type="video/webm" />
                    </video>
                  </div>
                  <iframe
                    src={`https://player.vimeo.com/video/${video.id}?loop=false&byline=false&portrait=false&title=false&speed=true&transparent=0&gesture=media`}
                    allow="autoplay; fullscreen"
                    allowtransparency
                    data-plyr-title={video.title}
                  />
                </div>
              </div>
            ))
          }
        </div>
      </main>
    </div>
  </div>
</Layout>

<script>
  // Load Plyr script
  const plyrScript = document.createElement("script");
  plyrScript.src = "/scripts/plyr.js";
  document.head.appendChild(plyrScript);

  plyrScript.onload = () => {
    if (typeof document !== "undefined") {
      document.querySelectorAll(".thumbnail-container").forEach((container) => {
        const img = container.querySelector(
          ".poster-image",
        ) as HTMLImageElement;
        const video = container.querySelector(
          ".hover-preview",
        ) as HTMLVideoElement;
        const thumbnailOverlay = container.querySelector(
          ".thumbnail-overlay",
        ) as HTMLDivElement;
        let hasPlayedOnce = false;

        const player = new window.Plyr(`#${container.id}`, {
          hideControls: true,
          controls: [
            "play",
            "progress",
            "current-time",
            "mute",
            "volume",
            "fullscreen",
            "title",
          ],
        });

        let isPlaying = false;

        player.on("ready", () => {
          player.toggleControls(false);
        });

        // Inside your existing player configuration
        player.on("ready", () => {
          if ("ontouchstart" in window) {
            container.addEventListener(
              "touchstart",
              () => {
                if (!hasPlayedOnce) {
                  player.play();
                  container.requestFullscreen();
                  thumbnailOverlay.style.opacity = "0";
                }
              },
              { passive: true },
            );
          }
        });

        player.on("play", () => {
  isPlaying = true;
  hasPlayedOnce = true;
  thumbnailOverlay.style.opacity = "0";
  thumbnailOverlay.style.display = "none"; // Force hide the overlay
  if (!document.fullscreenElement) {
    container.requestFullscreen();
  }
});

        player.on("enterfullscreen", () => {
          player.toggleControls(true);
        });

        player.on("exitfullscreen", () => {
          if (isPlaying) {
            player.toggleControls(true);
          } else {
            player.toggleControls(false);
          }
        });

        // Keep controls hidden for unplayed videos
        player.on("controlsshown", () => {
          if (!isPlaying && !document.fullscreenElement) {
            player.toggleControls(false);
          }
        });

        container.addEventListener(
          "mouseenter",
          () => {
            // Only enable hover preview on non-touch devices
            if (!hasPlayedOnce && !window.matchMedia("(hover: none)").matches) {
              img.style.opacity = "0";
              video.style.opacity = "1";
              video.play().catch(() => {});
            }
          },
          { passive: true },
        );

        container.addEventListener(
          "mouseleave",
          () => {
            if (!hasPlayedOnce && !window.matchMedia("(hover: none)").matches) {
              img.style.opacity = "1";
              video.style.opacity = "0";
              video.pause();
              video.currentTime = 0;
            }
          },
          { passive: true },
        );

        container.addEventListener(
          "click",
          () => {
            if (!hasPlayedOnce) {
              thumbnailOverlay.style.opacity = "0";
              container.requestFullscreen();
            }
          },
          { passive: true },
        );
      });
    }
  };

  if (typeof document !== "undefined") {
    const container = document.querySelector(".plyr-container");
    if (container) {
      let controlsVisible = false;

      container.addEventListener(
        "touchstart",
        () => {
          const controls = container.querySelectorAll(
            ".plyr__controls, .custom-fs-exit",
          ) as NodeListOf<HTMLElement>;

          controls.forEach((control) => {
            control.style.opacity = controlsVisible ? "0" : "1";
          });
          controlsVisible = !controlsVisible;
        },
        { passive: true },
      );
    }
  }
</script>

<style>
  :root {
    --plyr-color-main: #81001b;
    --plyr-control-icon-size: 12px;
    --plyr-control-radius: 2px;
    --plyr-video-control-color: #81001b;
    --plyr-video-control-color-hover: #060606;
    --plyr-range-thumb-height: 8px;
    --plyr-range-thumb-background: #81001b;
    --plyr-range-track-height: 2px;
    --plyr-range-fill-background: #490010;
    --plyr-tooltip-background: #060606;
    --plyr-font-family: "Kanit", sans-serif;
  }

  .custom-fs-exit {
    display: none;
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    cursor: pointer;
    color: #490010;
    font-size: 24px;
    padding: 10px;
    opacity: 1;
    transition: opacity 0.3s;
  }

  :fullscreen .custom-fs-exit {
    display: block;
  }

  :fullscreen .plyr-container:not(:hover) .custom-fs-exit,
  :fullscreen .plyr-container:not(:hover) .plyr__controls {
    opacity: 0;
  }

  .thumbnail-container {
    position: relative;
    border-radius: 10px;
    overflow: hidden;
  }

  .thumbnail-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    transition: opacity 300ms;
  }

  .poster-image,
  .hover-preview {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 300ms;
  }

  .hover-preview {
    opacity: 0;
  }
</style>
